// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: internal/grpchandler/handler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Handler_Ping_FullMethodName             = "/grpchandler.proto.Handler/Ping"
	Handler_APIDeleteLinks_FullMethodName   = "/grpchandler.proto.Handler/APIDeleteLinks"
	Handler_GetShortLink_FullMethodName     = "/grpchandler.proto.Handler/GetShortLink"
	Handler_GetOriginaltLink_FullMethodName = "/grpchandler.proto.Handler/GetOriginaltLink"
	Handler_Shorten_FullMethodName          = "/grpchandler.proto.Handler/Shorten"
	Handler_ShortenBatch_FullMethodName     = "/grpchandler.proto.Handler/ShortenBatch"
	Handler_GetUserLinks_FullMethodName     = "/grpchandler.proto.Handler/GetUserLinks"
	Handler_Stats_FullMethodName            = "/grpchandler.proto.Handler/Stats"
)

// HandlerClient is the client API for Handler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandlerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	APIDeleteLinks(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetShortLink(ctx context.Context, in *GetShortLinkRequest, opts ...grpc.CallOption) (*GetShortLinkResponse, error)
	GetOriginaltLink(ctx context.Context, in *GetOriginalRequest, opts ...grpc.CallOption) (*GetOriginalResponse, error)
	Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error)
	ShortenBatch(ctx context.Context, in *ShortenBatchRequest, opts ...grpc.CallOption) (*ShortenBatchResponse, error)
	GetUserLinks(ctx context.Context, in *UserLinksRequest, opts ...grpc.CallOption) (*UserLinksResponse, error)
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type handlerClient struct {
	cc grpc.ClientConnInterface
}

func NewHandlerClient(cc grpc.ClientConnInterface) HandlerClient {
	return &handlerClient{cc}
}

func (c *handlerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Handler_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) APIDeleteLinks(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Handler_APIDeleteLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetShortLink(ctx context.Context, in *GetShortLinkRequest, opts ...grpc.CallOption) (*GetShortLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShortLinkResponse)
	err := c.cc.Invoke(ctx, Handler_GetShortLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetOriginaltLink(ctx context.Context, in *GetOriginalRequest, opts ...grpc.CallOption) (*GetOriginalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOriginalResponse)
	err := c.cc.Invoke(ctx, Handler_GetOriginaltLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) Shorten(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenResponse)
	err := c.cc.Invoke(ctx, Handler_Shorten_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) ShortenBatch(ctx context.Context, in *ShortenBatchRequest, opts ...grpc.CallOption) (*ShortenBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenBatchResponse)
	err := c.cc.Invoke(ctx, Handler_ShortenBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) GetUserLinks(ctx context.Context, in *UserLinksRequest, opts ...grpc.CallOption) (*UserLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLinksResponse)
	err := c.cc.Invoke(ctx, Handler_GetUserLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handlerClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, Handler_Stats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandlerServer is the server API for Handler service.
// All implementations must embed UnimplementedHandlerServer
// for forward compatibility.
type HandlerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	APIDeleteLinks(context.Context, *DeleteLinkRequest) (*DeleteResponse, error)
	GetShortLink(context.Context, *GetShortLinkRequest) (*GetShortLinkResponse, error)
	GetOriginaltLink(context.Context, *GetOriginalRequest) (*GetOriginalResponse, error)
	Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error)
	ShortenBatch(context.Context, *ShortenBatchRequest) (*ShortenBatchResponse, error)
	GetUserLinks(context.Context, *UserLinksRequest) (*UserLinksResponse, error)
	Stats(context.Context, *StatsRequest) (*StatsResponse, error)
	mustEmbedUnimplementedHandlerServer()
}

// UnimplementedHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHandlerServer struct{}

func (UnimplementedHandlerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHandlerServer) APIDeleteLinks(context.Context, *DeleteLinkRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method APIDeleteLinks not implemented")
}
func (UnimplementedHandlerServer) GetShortLink(context.Context, *GetShortLinkRequest) (*GetShortLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortLink not implemented")
}
func (UnimplementedHandlerServer) GetOriginaltLink(context.Context, *GetOriginalRequest) (*GetOriginalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginaltLink not implemented")
}
func (UnimplementedHandlerServer) Shorten(context.Context, *ShortenRequest) (*ShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shorten not implemented")
}
func (UnimplementedHandlerServer) ShortenBatch(context.Context, *ShortenBatchRequest) (*ShortenBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenBatch not implemented")
}
func (UnimplementedHandlerServer) GetUserLinks(context.Context, *UserLinksRequest) (*UserLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLinks not implemented")
}
func (UnimplementedHandlerServer) Stats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedHandlerServer) mustEmbedUnimplementedHandlerServer() {}
func (UnimplementedHandlerServer) testEmbeddedByValue()                 {}

// UnsafeHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandlerServer will
// result in compilation errors.
type UnsafeHandlerServer interface {
	mustEmbedUnimplementedHandlerServer()
}

func RegisterHandlerServer(s grpc.ServiceRegistrar, srv HandlerServer) {
	// If the following call pancis, it indicates UnimplementedHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Handler_ServiceDesc, srv)
}

func _Handler_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_APIDeleteLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).APIDeleteLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_APIDeleteLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).APIDeleteLinks(ctx, req.(*DeleteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetShortLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetShortLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetShortLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetShortLink(ctx, req.(*GetShortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetOriginaltLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetOriginaltLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetOriginaltLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetOriginaltLink(ctx, req.(*GetOriginalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_Shorten_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Shorten(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_Shorten_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Shorten(ctx, req.(*ShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_ShortenBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).ShortenBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_ShortenBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).ShortenBatch(ctx, req.(*ShortenBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_GetUserLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).GetUserLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_GetUserLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).GetUserLinks(ctx, req.(*UserLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Handler_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandlerServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Handler_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandlerServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Handler_ServiceDesc is the grpc.ServiceDesc for Handler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Handler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpchandler.proto.Handler",
	HandlerType: (*HandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Handler_Ping_Handler,
		},
		{
			MethodName: "APIDeleteLinks",
			Handler:    _Handler_APIDeleteLinks_Handler,
		},
		{
			MethodName: "GetShortLink",
			Handler:    _Handler_GetShortLink_Handler,
		},
		{
			MethodName: "GetOriginaltLink",
			Handler:    _Handler_GetOriginaltLink_Handler,
		},
		{
			MethodName: "Shorten",
			Handler:    _Handler_Shorten_Handler,
		},
		{
			MethodName: "ShortenBatch",
			Handler:    _Handler_ShortenBatch_Handler,
		},
		{
			MethodName: "GetUserLinks",
			Handler:    _Handler_GetUserLinks_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Handler_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpchandler/handler.proto",
}
